package datadic.dao;

import java.util.Date;
import java.util.List;
import org.hibernate.LockMode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import pojo.TDatadic;

/**
 	* A data access object (DAO) providing persistence and search support for TDatadic entities.
 			* Transaction control of the save(), update() and delete() operations 
		can directly support Spring container-managed transactions or they can be augmented	to handle user-managed Spring transactions. 
		Each of these methods provides additional information for how to configure it for the desired type of transaction control. 	
	 * @see pojo.TDatadic
  * @author MyEclipse Persistence Tools 
 */

public class TDatadicDAO extends HibernateDaoSupport  {
	     private static final Logger log = LoggerFactory.getLogger(TDatadicDAO.class);
		//property constants
	public static final String DNAME = "dname";
	public static final String DPID = "dpid";
	public static final String DUPDATEUSER = "dupdateuser";
	public static final String DISDEL = "disdel";



	protected void initDao() {
		//do nothing
	}
    
    public void save(TDatadic transientInstance) {
        log.debug("saving TDatadic instance");
        try {
            getHibernateTemplate().save(transientInstance);
            log.debug("save successful");
        } catch (RuntimeException re) {
            log.error("save failed", re);
            throw re;
        }
    }
    
	public void delete(TDatadic persistentInstance) {
        log.debug("deleting TDatadic instance");
        try {
            getHibernateTemplate().delete(persistentInstance);
            log.debug("delete successful");
        } catch (RuntimeException re) {
            log.error("delete failed", re);
            throw re;
        }
    }
    
    public TDatadic findById( java.lang.Integer id) {
        log.debug("getting TDatadic instance with id: " + id);
        try {
            TDatadic instance = (TDatadic) getHibernateTemplate()
                    .get("pojo.TDatadic", id);
            return instance;
        } catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }
    
    
   
    

	public List<TDatadic> findByProperty(String propertyName, Object value) {
      log.debug("finding TDatadic instance with property: " + propertyName
            + ", value: " + value);
      
      try {
         String queryString = "from TDatadic as model where model." 
         						+ propertyName + "= ?";
         System.out.println("value="+value+",name="+propertyName);
         List<TDatadic> list = getHibernateTemplate().find(queryString, value);
         for (TDatadic tDatadic : list) {
			System.out.println(tDatadic.getDname());
		}
         return list;
      } catch (RuntimeException re) {
         log.error("find by property name failed", re);
         throw re;
      }
	}

	public List findByDname(Object dname
	) {
		return findByProperty(DNAME, dname
		);
	}
	
	public List<TDatadic> findByDpid(Object dpid
	) {
		
		return findByProperty(DPID, dpid
		);
	}
	
	
	
	public List findByDisdel(Object disdel
	) {
		return findByProperty(DISDEL, disdel
		);
	}
	

	public List<TDatadic> findAll() {
		log.debug("finding all TDatadic instances");
		try {
			String queryString = "from TDatadic";
		 	return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
   

    public void attachDirty(TDatadic instance) {
        log.debug("attaching dirty TDatadic instance");
        try {
            getHibernateTemplate().saveOrUpdate(instance);
            log.debug("attach successful");
        } catch (RuntimeException re) {
            log.error("attach failed", re);
            throw re;
        }
    }
    
}