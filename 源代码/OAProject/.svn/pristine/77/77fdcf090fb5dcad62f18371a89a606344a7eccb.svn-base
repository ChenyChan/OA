package post.action;

import java.io.File;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.ServletActionContext;
import org.hibernate.Hibernate;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.util.ResolverUtil.IsA;

import post.inf.PostFileInf;
import post.inf.PostInf;
import post.pojo.TPost;
import post.pojo.TPostFile;
import post.util.Tools;

public class PostAction extends ActionSupport {

	private TPost postbean;
	private String content;
	private String begindate;
	private String enddate;

	private List<File> upload;
	private List<String> uploadFileName;
	private List<String> uploadContentType;

	public TPost getPostbean() {
		return postbean;
	}

	public void setPostbean(TPost postbean) {
		this.postbean = postbean;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public String getBegindate() {
		return begindate;
	}

	public void setBegindate(String begindate) {
		this.begindate = begindate;
	}

	public String getEnddate() {
		return enddate;
	}

	public void setEnddate(String enddate) {
		this.enddate = enddate;
	}

	public List<File> getUpload() {
		return upload;
	}

	public void setUpload(List<File> upload) {
		this.upload = upload;
	}

	public List<String> getUploadFileName() {
		return uploadFileName;
	}

	public void setUploadFileName(List<String> uploadFileName) {
		this.uploadFileName = uploadFileName;
	}

	public List<String> getUploadContentType() {
		return uploadContentType;
	}

	public void setUploadContentType(List<String> uploadContentType) {
		this.uploadContentType = uploadContentType;
	}

	public String addpost() {
		HttpServletRequest request = ServletActionContext.getRequest();
		request.getSession().setAttribute("username", "user");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String username = (String) request.getSession()
				.getAttribute("username");
		postbean.setSuser(username);
		postbean.setNstatus(0);
		postbean.setUpdateuser("无");
		if (upload != null) {
			postbean.setNisfile(1);

		} else {
			postbean.setNisfile(0);
		}

		try {
			Date begin = sdf.parse(begindate);

			postbean.setBegindate(begin);
			Date end = sdf.parse(enddate);
			postbean.setEnddate(end);
			String nowdate = sdf.format(new Date());
			Date now = sdf.parse(nowdate);
			postbean.setAddtime(now);

		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		postbean.setScontent(Hibernate.createClob(" "));
		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"post_applicationContext.xml");
		PostInf dao = (PostInf) applicationContext.getBean("postDAO");

		int postid = dao.save(postbean, content);
		System.out.println(upload + "upload");
		// 拷贝文件
		if (upload != null) {

			for (int i = 0; i < upload.size(); i++) {
				// 获得新文件名称
				String newFileName = Tools.makeNewFileName(uploadFileName
						.get(i));
				String realpath = ServletActionContext.getServletContext()
						.getRealPath("/postFile");

				String realFilepath = realpath + "/" + newFileName;
				System.out.println(realFilepath);
				File newfile = new File(realFilepath);
				// 插入公告附件表
				TPostFile postFileBean = new TPostFile();
				postFileBean.setSoldname(uploadFileName.get(i));
				postFileBean.setSnewname(newFileName);
				postFileBean.setPostid(postid);
				PostFileInf postfiledao = (PostFileInf) applicationContext
						.getBean("postfileDAO");
				postfiledao.save(postFileBean);
				Tools.copyFile(upload.get(i), newfile);
			}
		}
		return SUCCESS;

	}

	public String lookpost() {
		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"post_applicationContext.xml");
		PostFileInf postfiledao = (PostFileInf) applicationContext
				.getBean("postfileDAO");

		// List<TPostFile> files=postfiledao.findByProperty("nid",21);
		String postid = ServletActionContext.getRequest()
				.getParameter("postid");
		System.out.println(postid);

		PostInf dao = (PostInf) applicationContext.getBean("postDAO");
		TPost postBean1 = dao.findById(Integer.parseInt(postid));

		// //附加查找

		//		
		// System.out.println(files);

		ServletActionContext.getRequest().setAttribute("postBean1", postBean1);
		// ServletActionContext.getRequest().setAttribute("postFileBeans",
		// files);

		return "lookpost";

	}
	public String updatebefore() {
		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"post_applicationContext.xml");
		PostFileInf postfiledao = (PostFileInf) applicationContext
				.getBean("postfileDAO");

		// List<TPostFile> files=postfiledao.findByProperty("nid",21);
		String postid = ServletActionContext.getRequest()
				.getParameter("postid");
		System.out.println(postid);

		PostInf dao = (PostInf) applicationContext.getBean("postDAO");
		TPost postBean1 = dao.findById(Integer.parseInt(postid));

		// //附加查找

		//		
		// System.out.println(files);

		ServletActionContext.getRequest().setAttribute("postBean1", postBean1);
		// ServletActionContext.getRequest().setAttribute("postFileBeans",
		// files);

		return "updatebefore";

	}

	public String shenghe() {
		String postid = ServletActionContext.getRequest()
				.getParameter("postid");
		String shenghe = ServletActionContext.getRequest().getParameter(
				"shenghe");
		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"post_applicationContext.xml");
		PostInf postdao = (PostInf) applicationContext.getBean("postDAO");
		TPost post = postdao.findById(Integer.parseInt(postid));
		post.setNstatus(Integer.parseInt(shenghe));
		postdao.saveOrUpdate(post);
		return "shenghe";

	}

	// public String updateBefore() {
	// List<PostFileBean> postFileBeans = new ArrayList<PostFileBean>();
	// String postid = ServletActionContext.getRequest()
	// .getParameter("postid");
	//
	// PostBean postBean1 = postDao.getpost(Integer.parseInt(postid));
	// postFileBeans = postFileDao.postFilelist(Integer.parseInt(postid));
	// System.out.println(postFileBeans);
	//
	// ServletActionContext.getRequest().setAttribute("postBean1", postBean1);
	// ServletActionContext.getRequest().setAttribute("postFileBeans",
	// postFileBeans);
	//
	// return "updatePost";
	//
	// }
	//
	// public String update() {
	//
	// System.out.println(postbean.getPostid() + "         sasasas");
	// postDao.updatepost(postbean);
	// // 拷贝文件
	// if (upload != null) {
	// for (int i = 0; i < upload.size(); i++) {
	// // 获得新文件名称
	// String newFileName = Tools.makeNewFileName(uploadFileName
	// .get(i));
	// String realpath = ServletActionContext.getServletContext()
	// .getRealPath("/postFile");
	//
	// String realFilepath = realpath + "/" + newFileName;
	// System.out.println(realFilepath);
	// File newfile = new File(realFilepath);
	// // 插入公告附件表
	// PostFileBean postFileBean = new PostFileBean();
	// postFileBean.setFilename(uploadFileName.get(i));
	// postFileBean.setNewfilename(newFileName);
	// postFileBean.setPostid(postbean.getPostid());
	// postFileDao.addpostFile(postFileBean);
	// Tools.copyFile(upload.get(i), newfile);
	// }
	// }
	// return SUCCESS;
	//
	// }
	//
	public String postlist() {

		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"post_applicationContext.xml");
		PostInf dao = (PostInf) applicationContext.getBean("postDAO");
		List<TPost> postlist = dao.findAll();
		ServletActionContext.getRequest().setAttribute("postlist", postlist);
		System.out.println(postlist);
		return "postlist";

	}

	public String shenghepost() {

		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"post_applicationContext.xml");
		PostInf dao = (PostInf) applicationContext.getBean("postDAO");
		List<TPost> postlist = dao.findAll();
		ServletActionContext.getRequest().setAttribute("postlist", postlist);
		System.out.println(postlist);
		return "shenghepost";

	}
	public String postmanage() {

		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"post_applicationContext.xml");
		PostInf dao = (PostInf) applicationContext.getBean("postDAO");
		List<TPost> postlist = dao.findAll();
		ServletActionContext.getRequest().setAttribute("postlist", postlist);
		System.out.println(postlist);
		return "postmanage";

	}

	 public String deletePost() {
			
	 String postid = ServletActionContext.getRequest()
	 .getParameter("postid");
	 System.out.println(postid+"postid");
	 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
		"post_applicationContext.xml");
		PostInf dao = (PostInf) applicationContext.getBean("postDAO");
		TPost post=dao.findById(Integer.parseInt(postid));
		dao.delete(post);//删除公告
		
//		PostFileInf postfiledao = (PostFileInf) applicationContext
//		.getBean("postfileDAO");
//
//		List<TPostFile> files=postfiledao.findByProperty("nid",21);
//				
//	 
//	 for (int i = 0; i < files.size(); i++) {
//	 //删除附件文件
//	 String realPath = ServletActionContext.getServletContext()
//	 .getRealPath("/postFile");
//	 String realFilePath = realPath + "/"
//	 + files.get(i).getSnewname();
//	 ;
//	 File file = new File(realFilePath);
//	 if (file.exists()) {
//	 file.delete();
//	 }
//	 }
////	 postFileDao.deletepostFilePostidAll(Integer.parseInt(postid));
//				
//	 
	
	 return "deletePost";
	
	 }

	/**
	 * 处理总文件大小超出 提示信息
	 */
	public void addActionError(String anErrorMessage) {

		System.out.println("anErrorMessage=" + anErrorMessage);

		if (anErrorMessage
				.startsWith("the request was rejected because its size")) {
			Matcher matcher = Pattern.compile("\\d+").matcher(anErrorMessage);
			double realNum = 0;
			if (matcher.find()) {
				String s1 = matcher.group();
				realNum = Integer.parseInt(s1) * 1.0 / 1024 / 1024;
			}
			double oldNum = 0;
			if (matcher.find()) {
				String s2 = matcher.group();
				oldNum = Integer.parseInt(s2) * 1.0 / 1024 / 1024;

			}
			NumberFormat numberFormat = new DecimalFormat("###,##0.00");
			// 避免重复添加提示信息
			if (this.getActionErrors().size() <= 0) {
				super.addActionError("系统拒绝了您的上传文件:文件的大小为("
						+ numberFormat.format(realNum) + ")M,超过系统允许的大小("
						+ numberFormat.format(oldNum) + ")M");

			}

		} else {
			super.addActionError(anErrorMessage);
		}
	}

	@Override
	public String execute() throws Exception {
		// TODO Auto-generated method stub
		System.out.println("exe");
		return super.execute();
	}

}
