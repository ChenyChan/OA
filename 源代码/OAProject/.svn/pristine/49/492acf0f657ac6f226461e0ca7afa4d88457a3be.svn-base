package email.service.imple;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.struts2.ServletActionContext;

import pojo.TEmail;
import pojo.TEmailFile;
import pojo.TReceiveemail;
import pojo.TReceiveemailId;
import email.dao.TEmailDAO;
import email.dao.TEmailFileDAO;
import email.dao.TReceiveemailDAO;
import email.service.inf.EmailServiceInf;
import email.tools.FileTool;

public class EmailServiceImple implements EmailServiceInf {
	private TEmailDAO emailDAO;
	private TEmailFileDAO emailFileDAO;
	private TReceiveemailDAO receiveemailDAO;

	public TEmailDAO getEmailDAO() {
		return emailDAO;
	}

	public void setEmailDAO(TEmailDAO emailDAO) {
		this.emailDAO = emailDAO;
	}

	public TEmailFileDAO getEmailFileDAO() {
		return emailFileDAO;
	}

	public void setEmailFileDAO(TEmailFileDAO emailFileDAO) {
		this.emailFileDAO = emailFileDAO;
	}

	public TReceiveemailDAO getReceiveemailDAO() {
		return receiveemailDAO;
	}

	public void setReceiveemailDAO(TReceiveemailDAO receiveemailDAO) {
		this.receiveemailDAO = receiveemailDAO;
	}

	// 更新邮件
	@Override
	public void update(TEmail email, int type, List<File> emailFile,
			List<String> emailFileFileName, String receiveUserNames) {
		// 新附件
		List<TEmailFile> emailFiles = getEmailFileName(emailFileFileName);
		// 读取老附件
		List<TEmailFile> oldEmailFiles = emailFileDAO.findByEmailId(email
				.getNemailid());
		// 删除原来的附件列表
		email.getEmailFiles().clear();
		// 加入老附件
		email.getEmailFiles().addAll(oldEmailFiles);
		if (emailFiles != null && emailFiles.size() > 0) {
			for (TEmailFile tEmailFile : emailFiles) {
				tEmailFile.setEmail(email);
				email.getEmailFiles().add(tEmailFile);
			}
		}
		email.setNisfile(email.getEmailFiles().size() > 0 ? true : false);
		email.setIsdel(0);
		email.setNemailmode(type == 0 ? false : true);
		email.setSenddate(new Date());
		email.setSenduser("111");
		// 保存之前 清除一下缓存
		emailDAO.getHibernateTemplate().clear();
		emailDAO.update(email);
		// 删除中间表的所有数据
		receiveemailDAO.deleteByEmailId(email.getNemailid());
		String[] userNames = receiveUserNames.split(";");
		for (String userName : userNames) {
			TReceiveemail receiveemail = new TReceiveemail(new TReceiveemailId(
					email, userName), false, false);
			receiveemailDAO.save(receiveemail);
		}
		if (emailFiles != null && emailFiles.size() > 0) {
			copyFile(emailFile, emailFiles);
		}

	}

	// 添加邮件
	@Override
	public void save(TEmail email, int type, List<File> emailFile,
			List<String> emailFileFileName, String receiveUserNames) {
		List<TEmailFile> emailFiles = getEmailFileName(emailFileFileName);
		if (emailFiles != null && emailFiles.size() > 0) {
			email.setNisfile(true);
			for (TEmailFile tEmailFile : emailFiles) {
				tEmailFile.setEmail(email);
				email.getEmailFiles().add(tEmailFile);
			}
		}	
		email.setIsdel(0);
		email.setNemailmode(type == 0 ? false : true);
		email.setSenddate(new Date());
		email.setSenduser("111");
		emailDAO.save(email);
		String[] userNames = receiveUserNames.split(";");
		for (String userName : userNames) {
			TReceiveemail receiveemail = new TReceiveemail(new TReceiveemailId(
					email, userName), false, false);
			receiveemailDAO.save(receiveemail);
		}
		if (emailFiles != null && emailFiles.size() > 0) {
			copyFile(emailFile, emailFiles);
		}

	}

	// 生成新文件名 返回TEmailFile
	public List<TEmailFile> getEmailFileName(List<String> emailFileFileName) {
		List<TEmailFile> emailFiles = new ArrayList<TEmailFile>();
		if (emailFileFileName == null || emailFileFileName.size() == 0) {
			return emailFiles;
		}
		for (int i = 0; i < emailFileFileName.size(); i++) {
			String newName = FileTool.makeNewFileName(emailFileFileName.get(i));
			TEmailFile file = new TEmailFile();
			file.setSnewname(newName);
			file.setSoldname(emailFileFileName.get(i));
			emailFiles.add(file);
		}
		return emailFiles;
	}

	// 拷贝文件
	public void copyFile(List<File> emailFile, List<TEmailFile> emailFiles) {
		if (emailFile == null || emailFile.size() == 0) {
			return;
		}
		String realPath = ServletActionContext.getServletContext().getRealPath(
				"/emailFile");
		for (int i = 0; i < emailFile.size(); i++) {
			File newFile = new File(realPath + "/"
					+ emailFiles.get(i).getSnewname());
			FileTool.copyFile(emailFile.get(i), newFile);
		}
	}

	/*
	 * public static void main(String[] args) { String s = "111;222;333;444;";
	 * System.out.println(s.split(";").length); }
	 */

	// 根据邮件id 获取接收用户
	@Override
	public String getReceiveUserNames(int emailId) {
		String receiveUserNames = "";
		List<TReceiveemail> receiveemails = receiveemailDAO
				.findByEmailId(emailId);
		for (TReceiveemail receiveemail : receiveemails) {
			receiveUserNames += receiveemail.getId().getSusername() + ";";
		}
		return receiveUserNames;
	}

	// 根据邮件id 获取邮件
	@Override
	public TEmail getEmail(int emailId) {
		
		
		
		return emailDAO.findById(emailId);
	}

	@Override
	public boolean deleteFile(int nfileid) {
		TEmailFile emailFile = emailFileDAO.findById(nfileid);
		emailFileDAO.delete(emailFile);
		String fileName = emailFile.getSnewname();
		String realPath = ServletActionContext.getServletContext().getRealPath(
				"/emailFile");
		File file = new File(realPath + "/" + fileName);
		if (file.exists()) {
			file.delete();
		}
		return true;
	}

	@Override
	public TReceiveemail getReceiveEmail(int emailId, String userName) {
		TReceiveemail receiveemail = receiveemailDAO.findById(emailId, userName);
		if(receiveemail.getNisread() == false){
			receiveemail.setNisread(true);
			receiveemailDAO.getHibernateTemplate().clear();
			receiveemailDAO.update(receiveemail);
		}
		
		return receiveemail;
	}

	@Override
	public TEmailFile getEmailFile(int fileid) {
		
		return emailFileDAO.findById(fileid);
	}
	/**
	 * 伪删除邮件
	 * 还原邮件
	 */

	@Override
	public boolean deleteEmail(int emailId, int type) {
		//获取当前登录用户名
				//
		String userName = "222";
		TEmail email = emailDAO.findById(emailId);
		if(userName.equals(email.getSenduser())){	
			email.setIsdel(type!=3?(type==0?0:2):1);
			emailDAO.update(email);
		}else{
			TReceiveemail receiveemail = receiveemailDAO.findById(emailId, userName);
			if(type == 4){
				receiveemailDAO.delete(receiveemail);
				
			}else{
				receiveemail.setNisdel(type==3?true:false);
				receiveemailDAO.update(receiveemail);
			}
			
			
		}
		
		
		return true;
	}

}
